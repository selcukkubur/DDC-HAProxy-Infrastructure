#---------------------------------------------------------------------
# DDC HAProxy Configuration - EU Zone
# Multi-protocol support: HTTP/HTTPS and gRPC
# High Availability with Health Checks and Statistics
#---------------------------------------------------------------------

global
    # Process and logging
    daemon
    user haproxy
    group haproxy
    pidfile /var/run/haproxy.pid
    
    # Performance tuning
    maxconn 4096
    nbthread 2
    
    # Logging
    log stdout len 65535 local0 info
    log-tag haproxy-eu
    
    # SSL/TLS Configuration
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-bind-ciphers ECDHE+aRSA+AESGCM:ECDHE+aRSA+SHA384:ECDHE+aRSA+SHA256:ECDHE+aRSA+RC4:ECDHE+aRSA+DES:ECDHE+aRSA+3DES:RSA+aRSA+AESGCM:RSA+aRSA+SHA384:RSA+aRSA+SHA256:RSA+aRSA+RC4:RSA+aRSA+DES:RSA+aRSA+3DES:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS
    ssl-default-server-options ssl-min-ver TLSv1.2
    
    # Certificate paths
    crt-base /etc/ssl/certs
    ca-base /etc/ssl/certs
    
    # Statistics socket for runtime API
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats timeout 30s

defaults
    mode http
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 5s
    
    # Logging
    option httplog
    option dontlognull
    option log-health-checks
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http
    
    # Health checks
    option httpchk GET /health
    http-check expect status 200

#---------------------------------------------------------------------
# Statistics Interface
#---------------------------------------------------------------------
listen stats
    bind *:8404
    bind *:8405 ssl crt /etc/ssl/certs/haproxy.pem
    stats enable
    stats uri /stats
    stats refresh 30s
    stats show-node
    stats show-legends
    stats show-desc "DDC HAProxy EU Zone Statistics"
    stats admin if { src 10.1.0.0/16 }
    
    # Authentication for stats (optional)
    # stats auth admin:secure_password_here
    
    # Health check endpoint
    monitor-uri /health

#---------------------------------------------------------------------
# HTTP/HTTPS Frontend
#---------------------------------------------------------------------
frontend http_frontend
    bind *:80
    mode http
    
    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }
    
    # Health check endpoint (allow HTTP for monitoring)
    acl is_health_check path_beg /health
    acl is_stats_check path_beg /stats
    use_backend health_backend if is_health_check
    use_backend stats_backend if is_stats_check

frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/haproxy.pem alpn h2,http/1.1
    mode http
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # CORS headers for API access
    http-response set-header Access-Control-Allow-Origin "*"
    http-response set-header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
    http-response set-header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
    
    # Request routing
    acl is_health_check path_beg /health
    acl is_api_request path_beg /api
    acl is_grpc_request hdr(content-type) -i application/grpc
    acl is_configwatcher_api hdr(host) -i configwatcher.ddc.example.com
    acl is_configwatcher_api hdr(host) -i eu-configwatcher.ddc.example.com
    
    # Backend selection
    use_backend health_backend if is_health_check
    use_backend configwatcher_backend if is_configwatcher_api
    use_backend ddc_nodes_grpc if is_grpc_request
    use_backend ddc_nodes_http if is_api_request
    default_backend ddc_nodes_http

#---------------------------------------------------------------------
# gRPC Frontend (Dedicated port for gRPC traffic)
#---------------------------------------------------------------------
frontend grpc_frontend
    bind *:8443 ssl crt /etc/ssl/certs/haproxy.pem alpn h2
    mode http
    option httplog
    
    # gRPC specific settings
    timeout client 1m
    
    # Health check for gRPC
    acl is_health_check path_beg /grpc.health.v1.Health
    use_backend health_backend if is_health_check
    
    default_backend ddc_nodes_grpc

#---------------------------------------------------------------------
# ConfigWatcher API Frontend
#---------------------------------------------------------------------
frontend configwatcher_frontend
    bind *:8080
    mode http
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    # Authentication check (JWT token validation would be handled by backend)
    acl has_auth_header req.hdr(Authorization) -m found
    http-request reject if !has_auth_header !{ path_beg /auth }
    
    default_backend configwatcher_backend

#---------------------------------------------------------------------
# Backend Definitions
#---------------------------------------------------------------------

# DDC Nodes - HTTP Backend
backend ddc_nodes_http
    mode http
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Backend servers (managed by ConfigWatcher)
    server node1 10.1.0.20:80 check inter 5s rise 2 fall 3 weight 100
    server node2 10.1.0.21:80 check inter 5s rise 2 fall 3 weight 100
    server node3 10.1.0.22:80 check inter 5s rise 2 fall 3 weight 100 backup
    
    # Connection settings
    timeout server 30s
    timeout connect 5s
    
    # Health check configuration
    option log-health-checks

# DDC Nodes - gRPC Backend
backend ddc_nodes_grpc
    mode http
    balance leastconn
    
    # gRPC specific health check (using HTTP health endpoint for now)
    option httpchk GET /health
    http-check expect status 200
    
    # Backend servers (managed by ConfigWatcher)
    server node1_grpc 10.1.0.20:80 check inter 10s rise 2 fall 3 weight 100
    server node2_grpc 10.1.0.21:80 check inter 10s rise 2 fall 3 weight 100
    server node3_grpc 10.1.0.22:80 check inter 10s rise 2 fall 3 weight 100 backup
    
    # gRPC connection settings
    timeout server 1m
    timeout connect 10s
    
    # HTTP/2 settings for gRPC

# ConfigWatcher API Backend
backend configwatcher_backend
    mode http
    balance roundrobin
    option httpchk GET /api/v1/health
    http-check expect status 200
    
    # ConfigWatcher instances
    server configwatcher1 10.1.0.30:8080 check inter 5s rise 2 fall 3
    server configwatcher2 10.1.0.31:8080 check inter 5s rise 2 fall 3 backup
    
    # API specific settings
    timeout server 30s
    timeout connect 5s

# Health Check Backend
backend health_backend
    mode http
    
    # Simple health response
    http-request return status 200 content-type "application/json" string '{"status":"healthy","zone":"eu","timestamp":"${date}","version":"1.0.0"}'

# Internal Stats Backend
backend stats_backend
    mode http
    
    # Redirect to stats interface
    http-request redirect location /stats

#---------------------------------------------------------------------
# Cross-Zone Health Monitoring
#---------------------------------------------------------------------

# US Zone Health Check
listen us_zone_health_check
    bind 127.0.0.1:9001
    mode http
    option httpchk GET /health
    http-check expect status 200
    
    # US zone VIP health check
    server us_zone 10.2.0.100:80 check inter 10s rise 2 fall 5
    
    # Webhook notification on failure (handled by external script)
    # stats socket /var/run/haproxy_us_health.sock

#---------------------------------------------------------------------
# Maintenance and Emergency Backends
#---------------------------------------------------------------------

# Maintenance page backend
backend maintenance_backend
    mode http
    http-request return status 503 content-type "text/html" string "<html><head><title>DDC Infrastructure - Maintenance</title></head><body style='font-family:Arial,sans-serif;text-align:center;background:#667eea;color:white;padding:50px;'><h1>ðŸ”§ Maintenance Mode</h1><p>DDC Infrastructure is currently undergoing maintenance.</p><p>Please try again in a few minutes.</p></body></html>"

# Emergency backend (minimal functionality)
backend emergency_backend
    mode http
    balance roundrobin
    
    # Fallback to any available node with reduced health checks
    server emergency1 10.1.0.20:80 check inter 30s rise 1 fall 10
    server emergency2 10.1.0.21:80 check inter 30s rise 1 fall 10

#---------------------------------------------------------------------
# ACL Definitions for Advanced Routing
#---------------------------------------------------------------------

# Geographic routing (based on GeoIP or CF-IPCountry header)
# acl from_us_region hdr(CF-IPCountry) US CA MX
# acl from_eu_region hdr(CF-IPCountry) GB DE FR IT ES NL BE CH AT

# API version routing
# acl api_v1 path_beg /api/v1
# acl api_v2 path_beg /api/v2

# Load balancing based on URL patterns
# acl storage_requests path_beg /api/v1/storage
# acl compute_requests path_beg /api/v1/compute

#---------------------------------------------------------------------
# Rate Limiting and DDoS Protection
#---------------------------------------------------------------------

# Global rate limiting table
# stick-table type ip size 1m expire 10m store gpc0,http_req_rate(10s),http_err_rate(10s)

# Per-IP rate limiting
# http-request track-sc0 src table global_rate_limit
# http-request reject if { sc_http_req_rate(0) gt 100 }

#---------------------------------------------------------------------
# Logging Configuration
#---------------------------------------------------------------------

# Custom log format for detailed analysis
# log-format "%ci:%cp [%t] %ft %b/%s %Tq/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

#---------------------------------------------------------------------
# SSL Certificate Auto-Renewal Hook
#---------------------------------------------------------------------

# Post-reload hook for certificate updates
# stats socket /var/run/haproxy.sock mode 600 level admin
# Example: echo "reload" | socat stdio /var/run/haproxy.sock 
